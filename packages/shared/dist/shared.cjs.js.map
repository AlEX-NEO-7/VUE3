{"version":3,"file":"shared.cjs.js","sources":["../src/index.ts"],"sourcesContent":["/**\r\n * @private\r\n * 合并对象\r\n */\r\nexport const extend = Object.assign;\r\n\r\n/**\r\n * @private\r\n * 判断是否为对象\r\n */\r\nexport const isObject = (value: unknown): value is {} => value instanceof Object;\r\n\r\n/**\r\n * @private\r\n * 判断是否为数组\r\n */\r\nexport const isArray = Array.isArray;\r\n\r\n/**\r\n * @private\r\n * 判断是否为Symbol\r\n */\r\nexport const isSymbol = (value: unknown): value is symbol => typeof value === \"symbol\";\r\n\r\n/**\r\n * @private\r\n * 判断是否为数字\r\n */\r\nexport const isNumber = (value: unknown): value is number => typeof value === \"number\";\r\n\r\n/**\r\n * @private\r\n * 判断是否为字符串\r\n */\r\nexport const isString = (value: unknown): value is string => typeof value === \"string\";\r\n\r\n/**\r\n * @private\r\n * 判断是否为函数\r\n */\r\nexport const isFunction = (value: unknown): value is Function => typeof value === \"function\";\r\n\r\n/**\r\n * @private\r\n * 判断key值是否为数字类型\r\n */\r\nexport const isIntegerKey = (key: unknown): boolean => isString(key) &&\r\n   key !== 'NaN' &&\r\n   key[0] !== '-' &&\r\n   '' + parseInt(key, 10) === key;\r\n\r\nlet own = Object.prototype.hasOwnProperty;\r\n/**\r\n * @private\r\n * 判断key是否为target对象上的属性\r\n */\r\nexport const hasOwn = (target: object, key: string | symbol): boolean => own.call(target, key);\r\n\r\n/**\r\n * @private\r\n * 判断两个value是否一致\r\n */\r\nexport const hasChanged = (oldValue: any, value: any): boolean => !Object.is(value, oldValue);\r\n\r\nconst camelizeRE = /-(\\w)/g;\r\n/**\r\n * @private\r\n * 把烤肉串命名方式转换成驼峰命名方式\r\n */\r\nexport const camelize = (value: string): string => {\r\n   return value.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : \"\")\r\n}\r\n\r\n// on+一个大写字母格式开头\r\nexport const isOn = (key: any): boolean => /^on[A-Z]/.test(key);\r\n\r\n/**\r\n * @private\r\n * 首字母大写\r\n */\r\nexport const capitalize = (value: string):string => value.charAt(0).toUpperCase() + value.slice(1);\r\n\r\n/**\r\n * @private\r\n * 添加 on 前缀，并且首字母大写\r\n */\r\nexport const toHandlerKey = (value: string):string => value ? `on${capitalize(value)}` : ``;\r\n\r\nexport const enum ShapeFlags { // 二进制移位\r\n   ELEMENT = 1,\r\n   FUNCTIONAL_COMPONENT = 1 << 1, // 函数式组件\r\n   STATEFUL_COMPONENT = 1 << 2,   // 普通组件\r\n   TEXT_CHILDREN = 1 << 3,        // 子节点是文本\r\n   ARRAY_CHILDREN = 1 << 4,       // 子节点是数组\r\n   SLOTS_CHILDREN = 1 << 5,       // 组件插槽\r\n   TELPRORT = 1 << 6,             // teleport组件\r\n   SUSPENSE = 1 << 7,             // suspense组件\r\n   COMPONENT = ShapeFlags.STATEFUL_COMPONENT | FUNCTIONAL_COMPONENT    // 组件\r\n}\r\n\r\n// component = 010 | 100 = 110\r\n// component & FUN = 010  compoent & STAT = 100\r\n// 与其他人 与算法 得出来的都为0  这种做法可以确定权限的关系 \r\n"],"names":[],"mappings":";;;;AAAA;;;AAGG;AACU,MAAA,MAAM,GAAG,MAAM,CAAC,OAAO;AAEpC;;;AAGG;AACI,MAAM,QAAQ,GAAG,CAAC,KAAc,KAAkB,KAAK,YAAY,OAAO;AAEjF;;;AAGG;AACU,MAAA,OAAO,GAAG,KAAK,CAAC,QAAQ;AAErC;;;AAGG;AACI,MAAM,QAAQ,GAAG,CAAC,KAAc,KAAsB,OAAO,KAAK,KAAK,SAAS;AAEvF;;;AAGG;AACI,MAAM,QAAQ,GAAG,CAAC,KAAc,KAAsB,OAAO,KAAK,KAAK,SAAS;AAEvF;;;AAGG;AACI,MAAM,QAAQ,GAAG,CAAC,KAAc,KAAsB,OAAO,KAAK,KAAK,SAAS;AAEvF;;;AAGG;AACI,MAAM,UAAU,GAAG,CAAC,KAAc,KAAwB,OAAO,KAAK,KAAK,WAAW;AAE7F;;;AAGG;AACI,MAAM,YAAY,GAAG,CAAC,GAAY,KAAc,QAAQ,CAAC,GAAG,CAAC;AACjE,IAAA,GAAG,KAAK,KAAK;AACb,IAAA,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG;IACd,EAAE,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,KAAK,IAAI;AAElC,IAAI,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC;AAC1C;;;AAGG;AACU,MAAA,MAAM,GAAG,CAAC,MAAc,EAAE,GAAoB,KAAc,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE;AAE/F;;;AAGG;MACU,UAAU,GAAG,CAAC,QAAa,EAAE,KAAU,KAAc,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE;AAE9F,MAAM,UAAU,GAAG,QAAQ,CAAC;AAC5B;;;AAGG;AACU,MAAA,QAAQ,GAAG,CAAC,KAAa,KAAY;IAC/C,OAAO,KAAK,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,CAAA;AACvE,EAAC;AAED;AACO,MAAM,IAAI,GAAG,CAAC,GAAQ,KAAc,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE;AAEhE;;;AAGG;AACU,MAAA,UAAU,GAAG,CAAC,KAAa,KAAY,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;AAEnG;;;AAGG;MACU,YAAY,GAAG,CAAC,KAAa,KAAY,KAAK,GAAG,CAAA,EAAA,EAAK,UAAU,CAAC,KAAK,CAAC,EAAE,GAAG,CAAA,EAAG;AAc5F;AACA;AACA;;;;;;;;;;;;;;;;;"}